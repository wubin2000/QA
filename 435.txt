/*
 * Copyright (c) 2014 NTT DATA CORPORATION. All rights reserved.
 */
package telecom.cms.sbd.logic.check;

import org.apache.commons.lang.StringUtils;

import telecom.cms.sbd.SbdInnerErrIF;
import telecom.cms.sbd.SbdMsgIF;
import telecom.cms.sbd.controller.SbdCordinator;
import telecom.cms.sbd.entity.NgnOrderInf;
import telecom.cms.sbd.exception.SbdApplicationException;
import telecom.cms.sbd.exception.SbdSystemException;
import telecom.cms.sbd.util.SbdUtil;
import telecom.cms.sbd.value.NgnAddInf;
import telecom.common.logging.LoggerIf;

/**
 * 商品拡張項目変更チェック
 * 前注文のラベル30がNTT直販、自注文のラベル30が卸事業者であることをチェックする。
 * ※料金割引アダプタではラベル30を商品拡張項目として扱う
 * @author $Author: yamanouetsg $
 * @version $Revision: 1.2 $
 */
public class MstrReceptValidatePatturn035 implements SbdCheckIF {

    /**
     * デバッグログに使用するクラス名
     */
    private static final String LOG_HEADER = SbdUtil
            .getLoHeader(new Throwable());

    /**
     * 商品拡張項目変更チェックメソッド
     * @param sbdCordinator 料金割引アダプタ連携オブジェクト
     * @exception SbdApplicationException 料金・割引アダプタ内部アプリケーション例外
     * @exception SbdSystemException 料金・割引アダプタ内部システム例外
     */
    public void check(SbdCordinator sbdCordinator)
			throws SbdApplicationException, SbdSystemException {
        // メソッド名取得
        final String method = SbdUtil.getMethodName(new Throwable());

        try {
            if (SbdUtil.LOG.isDebugLoggable()) {
                // メソッド開始ログ出力
                SbdUtil.putStartLog(LoggerIf.DEBUG,
                                    new String[]{LOG_HEADER, method});
            }

            // ラベル30を取得する
            String label30 = sbdCordinator.getNgnAddInf().getLabel30Add();
            // ラベル30（前注文）を取得する
            String preLabel30 = sbdCordinator.getPreNgnOrderInf().getLabel30();

            if (SbdUtil.LOG.isDebugLoggable()) {
                SbdUtil.putLog(LoggerIf.DEBUG,
                  new Object[]{LOG_HEADER, method, SbdMsgIF.SBD_NML_LOG_PARAMS},
                  new Object[][]{{NgnAddInf.LABEL30ADD, label30},
                                 {NgnOrderInf.LABEL30, preLabel30}});
            }

            // ラベル30（前注文）とラベル30がともに（NULL または 空文字列）
            // または、ラベル30（前注文）とラベル30がともに（NULL または 空文字列）以外の場合はエラー
            if ((StringUtils.isEmpty(preLabel30)
                    && StringUtils.isEmpty(label30))
                        || (StringUtils.isNotEmpty(preLabel30)
                            && StringUtils.isNotEmpty(label30))) {
                throw new SbdApplicationException(
                    SbdInnerErrIF.SBD_ERR_035_INVALID_LABEL30);
            }

            if (SbdUtil.LOG.isDebugLoggable()) {
                // メソッド終了ログ出力
                SbdUtil.putEndLog(LoggerIf.DEBUG,
                    new String[]{LOG_HEADER, method});
            }
        } catch (SbdApplicationException e) {
            throw e;
        } catch (SbdSystemException e) {
            throw e;
        } catch (Exception e) {
            throw new SbdSystemException(SbdMsgIF.SBD_ERR_SYSTEM_MSG_035, e);
        }
    }
}
